{"version":3,"sources":["Components/Input.tsx","Components/MarkerIcon.tsx","Components/WeatherPopup.tsx","Api/weather.ts","Api/index.ts","Hooks/dimensionHook.ts","Hooks/index.ts","App.tsx","Hooks/userDebounce.ts","reportWebVitals.ts","index.tsx"],"names":["Input","value","onChange","placeholder","onBlur","onFocus","Wrapper","type","styled","div","MarkerIcon","imgPath","src","alt","WeatherPopup","memo","data","className","location","name","current","condition","icon","text","Date","getDate","getMonth","temp_c","temp_f","wind_kph","uv","forecast","forecastday","map","item","index","date","day","mintemp_c","toFixed","maxtemp_c","mintemp_f","maxtemp_f","WeatherPopupMobile","isShowPopup","isLoading","onClose","WrapperMobile","onClick","size","color","p","weatherApi","keySearch","url","process","axiosClient","get","q","queryString","require","axios","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","getWindowDimensions","window","width","innerWidth","height","innerHeight","sleep","delayTime","Promise","resolve","setTimeout","Container","SearchResult","WeatherLoading","App","useState","latitude","longitude","zoom","pitch","viewport","setViewport","currentCoordinates","setCurrentCoordinates","setKeySearch","isLoadingLocations","setIsLoadingLocations","isLoadingWeather","setIsLoadingWeather","listLocations","setListLocations","isShowSearchResult","setIsShowSearchResult","isFocusInput","setIsFocusInput","setIsShowPopUp","currentWeather","setCurrentWeather","darkMode","setDarkMode","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","navigator","geolocation","getCurrentPosition","position","coords","prev","then","res","catch","err","console","log","finally","callback","delay","deps","_callback","useCallback","timerId","clearTimeout","useDebounce","trim","slug","handleBlurInput","a","checked","e","target","length","lat","lon","id","mapboxApiAccessToken","onViewportChange","mapStyle","offsetLeft","offsetTop","closeButton","anchor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04dc31a6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IProps {\r\n    value: string;\r\n    placeholder?: string;\r\n    onChange: (e?: React.ChangeEvent<HTMLInputElement>) => any;\r\n    onBlur?: (e?: React.FocusEvent<HTMLInputElement>) => any;\r\n    onFocus?: (e?: React.FocusEvent<HTMLInputElement>) => any;\r\n}\r\n\r\nexport const Input: React.FC<IProps> = ({\r\n    value,\r\n    onChange,\r\n    placeholder = \"\",\r\n    onBlur = () => {},\r\n    onFocus = () => {},\r\n}) => {\r\n    return (\r\n        <Wrapper>\r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={onChange}\r\n                placeholder={placeholder}\r\n                onFocus={onFocus}\r\n                onBlur={onBlur}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    input {\r\n        outline: none;\r\n        padding: 5px 10px;\r\n        min-width: 250px;\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MarkerIcon: React.FC<{ imgPath: string }> = ({ imgPath }) => {\r\n    return (\r\n        <Wrapper>\r\n            <img src={imgPath} alt=\"\" />\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n    width: 20px;\r\n    cursor: pointer;\r\n\r\n    img {\r\n        width: 100%;\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nimport { IResponseWeather } from \"src/Interface\";\r\nimport React, { memo } from \"react\";\r\nimport { RingLoader } from \"react-spinners\";\r\n\r\nexport const WeatherPopup: React.FC<{ data: IResponseWeather }> = memo(\r\n    ({ data }) => {\r\n        return (\r\n            <Wrapper>\r\n                <div className=\"heading\">Location: {data.location.name}</div>\r\n                <div className=\"main\">\r\n                    <div className=\"image\">\r\n                        <img src={data.current.condition.icon} alt=\"\" />\r\n                        <p className=\"text\">{data.current.condition.text}</p>\r\n                    </div>\r\n                    <div className=\"weather\">\r\n                        <div className=\"day\">{`${new Date().getDate()}/${\r\n                            new Date().getMonth() + 1\r\n                        }`}</div>\r\n                        <div className=\"temp\">\r\n                            <span>Temperature: </span>\r\n                            <span className=\"c\">\r\n                                {data.current.temp_c}\r\n                                °C\r\n                            </span>\r\n                            <span className=\"f\">\r\n                                {data.current.temp_f}\r\n                                °F\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"wind\">\r\n                            Wind Speed: {data.current.wind_kph} Km/h\r\n                        </div>\r\n                        <div className=\"uv\">UV: {data.current.uv}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"forecast\">\r\n                    {data.forecast.forecastday.map((item, index) => {\r\n                        return (\r\n                            <div key={index} className=\"forecastItem\">\r\n                                <div className=\"day\">\r\n                                    {`${new Date(item.date).getDate()}/${\r\n                                        new Date(item.date).getMonth() + 1\r\n                                    }`}\r\n                                </div>\r\n                                <div className=\"image\">\r\n                                    <img src={item.day.condition.icon} alt=\"\" />\r\n                                </div>\r\n                                <div className=\"temp\">\r\n                                    {item.day.mintemp_c.toFixed(1)} -{\" \"}\r\n                                    {item.day.maxtemp_c.toFixed(1)}°C\r\n                                    <br />\r\n                                    {item.day.mintemp_f.toFixed(1)} -{\" \"}\r\n                                    {item.day.maxtemp_f.toFixed(1)}°F\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </Wrapper>\r\n        );\r\n    }\r\n);\r\n\r\nexport const WeatherPopupMobile: React.FC<{\r\n    data: IResponseWeather | null;\r\n    isShowPopup: boolean;\r\n    isLoading: boolean;\r\n    onClose: () => any;\r\n}> = memo(({ data, isShowPopup, isLoading, onClose }) => {\r\n    return (\r\n        <WrapperMobile isShowPopup={isShowPopup}>\r\n            <button className=\"closeBtn\" onClick={onClose}>\r\n                &times;\r\n            </button>\r\n            {!isLoading ? (\r\n                data ? (\r\n                    <>\r\n                        <div className=\"heading\">\r\n                            Location: {data.location.name}\r\n                        </div>\r\n                        <div className=\"main\">\r\n                            <div className=\"image\">\r\n                                <img src={data.current.condition.icon} alt=\"\" />\r\n                                <p className=\"text\">\r\n                                    {data.current.condition.text}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"weather\">\r\n                                <div className=\"day\">{`${new Date().getDate()}/${\r\n                                    new Date().getMonth() + 1\r\n                                }`}</div>\r\n                                <div className=\"temp\">\r\n                                    <span>Temperature: </span>\r\n                                    <span className=\"c\">\r\n                                        {data.current.temp_c}\r\n                                        °C\r\n                                    </span>\r\n                                    <span className=\"f\">\r\n                                        {data.current.temp_f}\r\n                                        °F\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"wind\">\r\n                                    Wind Speed: {data.current.wind_kph} Km/h\r\n                                </div>\r\n                                <div className=\"uv\">UV: {data.current.uv}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"forecast\">\r\n                            {data.forecast.forecastday.map((item, index) => {\r\n                                return (\r\n                                    <div key={index} className=\"forecastItem\">\r\n                                        <div className=\"day\">\r\n                                            {`${new Date(\r\n                                                item.date\r\n                                            ).getDate()}/${\r\n                                                new Date(item.date).getMonth() +\r\n                                                1\r\n                                            }`}\r\n                                        </div>\r\n                                        <div className=\"image\">\r\n                                            <img\r\n                                                src={item.day.condition.icon}\r\n                                                alt=\"\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"temp\">\r\n                                            {item.day.mintemp_c.toFixed(1)} -{\" \"}\r\n                                            {item.day.maxtemp_c.toFixed(1)}°C\r\n                                            <br />\r\n                                            {item.day.mintemp_f.toFixed(\r\n                                                1\r\n                                            )} - {item.day.maxtemp_f.toFixed(1)}\r\n                                            °F\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <></>\r\n                )\r\n            ) : (\r\n                <div className=\"loading\">\r\n                    <RingLoader size={30} color=\"#000\" />\r\n                </div>\r\n            )}\r\n        </WrapperMobile>\r\n    );\r\n});\r\n\r\nconst Wrapper = styled.div`\r\n    .heading {\r\n        text-align: center;\r\n        padding: 0 10px;\r\n        font-size: 20px;\r\n        font-weight: 700;\r\n    }\r\n\r\n    .day {\r\n        font-weight: 700;\r\n    }\r\n\r\n    .main {\r\n        display: flex;\r\n        align-items: stretch;\r\n        padding-bottom: 10px;\r\n        font-size: 14px;\r\n\r\n        .image {\r\n            padding: 0 10px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n        }\r\n\r\n        .weather {\r\n            padding: 10px;\r\n\r\n            .f {\r\n                margin-left: 10px;\r\n            }\r\n        }\r\n    }\r\n\r\n    .forecast {\r\n        padding-top: 5px;\r\n        border-top: 1px solid #ccc;\r\n        display: flex;\r\n\r\n        .forecastItem {\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n\r\n            .temp {\r\n                font-size: 13px;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst WrapperMobile = styled(Wrapper)<{ isShowPopup: boolean }>`\r\n    z-index: 1;\r\n    position: fixed;\r\n    bottom: ${(p) => (p.isShowPopup ? 0 : \"-1000px\")};\r\n    left: 0;\r\n    background-color: #fff;\r\n    width: 100%;\r\n    padding: 10px 0;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);\r\n    border-top: 1px solid #ccc;\r\n    transition: 700ms;\r\n\r\n    .closeBtn {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        width: 30px;\r\n        height: 30px;\r\n        font-size: 20px;\r\n        appearance: none;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border: 1px solid #3a3939;\r\n        outline: none;\r\n    }\r\n\r\n    .loading {\r\n        padding: 30px;\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n\r\n        > span {\r\n            display: inline-block;\r\n            position: relative;\r\n            left: -5px;\r\n        }\r\n    }\r\n\r\n    .heading {\r\n        text-align: left;\r\n        padding-left: 10px;\r\n    }\r\n`;\r\n","import axiosClient from \".\";\r\nimport { ILocation, IResponseWeather } from \"src/Interface\";\r\n\r\nexport const weatherApi = {\r\n    searchLocation(keySearch: string): Promise<ILocation[]> {\r\n        const url = `search.json?key=${process.env.REACT_APP_MAP_API_KEY}&q=${keySearch}`;\r\n        return axiosClient.get(url);\r\n    },\r\n    getCurrentWeather(q: string): Promise<IResponseWeather> {\r\n        const url = `forecast.json?key=${process.env.REACT_APP_MAP_API_KEY}&q=${q}&days=3`;\r\n        return axiosClient.get(url);\r\n    },\r\n};\r\n","import axios from \"axios\";\r\nconst queryString = require(\"query-string\");\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: process.env.REACT_APP_WEATHER_API_URL,\r\n\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"X-Requested-With\": \"XMLHttpRequest\",\r\n    },\r\n\r\n    paramsSerializer: (params) => queryString.stringify(params),\r\n});\r\n\r\naxiosClient.interceptors.request.use((config) => {\r\n    return config;\r\n});\r\n\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n});\r\n\r\nexport default axiosClient;\r\nexport * from \"./weather\";\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","export * from \"./userDebounce\";\r\nexport * from \"./dimensionHook\";\r\n\r\nexport const sleep = (delayTime: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(\"\");\r\n        }, delayTime);\r\n    });\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\nimport styled from \"styled-components\";\nimport slug from \"slug\";\nimport RingLoader from \"react-spinners/RingLoader\";\nimport { DarkModeSwitch } from \"react-toggle-dark-mode\";\n\nimport {\n    MarkerIcon,\n    Input,\n    WeatherPopup,\n    WeatherPopupMobile,\n} from \"src/Components\";\nimport { weatherApi } from \"src/Api\";\nimport { sleep, useDebounce, useWindowDimensions } from \"src/Hooks\";\nimport {\n    IViewport,\n    ICoordinates,\n    ILocation,\n    IResponseWeather,\n} from \"src/Interface\";\n\nconst App: React.FC = () => {\n    const [viewport, setViewport] = useState<IViewport>({\n        latitude: 37.7577,\n        longitude: -122.4376,\n        zoom: 10,\n        width: \"100%\",\n        height: \"100%\",\n        pitch: 40,\n    });\n    const [currentCoordinates, setCurrentCoordinates] = useState<ICoordinates>({\n        latitude: 0,\n        longitude: 0,\n    });\n    const [keySearch, setKeySearch] = useState<string>(\"\");\n    const [isLoadingLocations, setIsLoadingLocations] =\n        useState<boolean>(false);\n    const [isLoadingWeather, setIsLoadingWeather] = useState<boolean>(false);\n    const [listLocations, setListLocations] = useState<ILocation[]>([]);\n    const [isShowSearchResult, setIsShowSearchResult] =\n        useState<boolean>(false);\n    const [isFocusInput, setIsFocusInput] = useState<boolean>(false);\n    const [isShowPopup, setIsShowPopUp] = useState<boolean>(false);\n    const [currentWeather, setCurrentWeather] =\n        useState<IResponseWeather | null>(null);\n    const [darkMode, setDarkMode] = useState<boolean>(false);\n    const { width } = useWindowDimensions();\n\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setCurrentCoordinates({\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude,\n                });\n                setViewport((prev) => {\n                    return {\n                        ...prev,\n                        latitude: position.coords.latitude,\n                        longitude: position.coords.longitude,\n                    };\n                });\n                setIsLoadingWeather(true);\n                weatherApi\n                    .getCurrentWeather(\n                        `${position.coords.latitude},${position.coords.longitude}`\n                    )\n                    .then((res: IResponseWeather) =>\n                        setCurrentWeather({\n                            ...res,\n                            location: {\n                                ...res.location,\n                                name: \"Your location\",\n                            },\n                        })\n                    )\n                    .catch((err) => {\n                        setCurrentWeather(null);\n                        console.log(err);\n                    })\n                    .finally(() => setIsLoadingWeather(false));\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        setIsShowSearchResult(isFocusInput);\n    }, [isFocusInput]);\n\n    useDebounce(\n        () => {\n            if (keySearch.trim()) {\n                setIsLoadingLocations(true);\n                weatherApi\n                    .searchLocation(slug(keySearch.trim()))\n                    .then((res: ILocation[]) => {\n                        setListLocations(res);\n                    })\n                    .catch((err) => {\n                        setListLocations([]);\n                        console.log(err);\n                    })\n                    .finally(() => setIsLoadingLocations(false));\n            } else {\n                setListLocations([]);\n            }\n        },\n        500,\n        [keySearch]\n    );\n\n    const handleChangeKeySearch = (e?: React.ChangeEvent<HTMLInputElement>) => {\n        if (e) {\n            setKeySearch(e.target.value);\n        }\n    };\n\n    const handleFocusInput = () => {\n        setIsFocusInput(true);\n    };\n\n    const handleBlurInput = async () => {\n        await sleep(150);\n        setIsFocusInput(false);\n    };\n\n    const handleClickLocation = (location: ILocation) => {\n        setCurrentCoordinates({\n            latitude: location.lat,\n            longitude: location.lon,\n        });\n        setViewport((prev: IViewport) => {\n            return {\n                ...prev,\n                latitude: location.lat,\n                longitude: location.lon,\n            };\n        });\n        setIsLoadingWeather(true);\n        setCurrentWeather(null);\n        setIsShowPopUp(true);\n        weatherApi\n            .getCurrentWeather(location.url)\n            .then((res: IResponseWeather) => {\n                setCurrentWeather(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n            .finally(() => setIsLoadingWeather(false));\n    };\n\n    const handleTogglePopup = () => {\n        setIsShowPopUp(!isShowPopup);\n    };\n\n    return (\n        <Container className=\"App\">\n            <div className=\"toggleDarkMode\">\n                <DarkModeSwitch\n                    checked={darkMode}\n                    onChange={(e) => setDarkMode(e)}\n                    size={120}\n                />\n            </div>\n            <div className=\"searchBox\">\n                <Input\n                    value={keySearch}\n                    onChange={handleChangeKeySearch}\n                    placeholder=\"Enter city name\"\n                    onBlur={handleBlurInput}\n                    onFocus={handleFocusInput}\n                />\n                {isShowSearchResult && (\n                    <SearchResult>\n                        {listLocations.length ? (\n                            <div className=\"listLocations\">\n                                {listLocations.map((item: ILocation) => {\n                                    const handleClick = () =>\n                                        handleClickLocation(item);\n                                    return (\n                                        <div\n                                            className=\"resultItem\"\n                                            key={item.id}\n                                            onClick={handleClick}\n                                        >\n                                            {item.name}\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ) : (\n                            <div className=\"noItem\">No items</div>\n                        )}\n                    </SearchResult>\n                )}\n                {isLoadingLocations && (\n                    <div className=\"loading\">\n                        <RingLoader size={25} color=\"#fff\" />\n                    </div>\n                )}\n            </div>\n            <ReactMapGL\n                {...viewport}\n                mapboxApiAccessToken={process.env.REACT_APP_MAP_ACCESS_TOKEN}\n                width=\"100%\"\n                height=\"100%\"\n                onViewportChange={(viewport: IViewport) =>\n                    setViewport(viewport)\n                }\n                mapStyle={\n                    darkMode\n                        ? \"mapbox://styles/mapbox/dark-v9\"\n                        : \"mapbox://styles/mapbox/light-v9\"\n                }\n            >\n                <Marker\n                    latitude={currentCoordinates.latitude}\n                    longitude={currentCoordinates.longitude}\n                    offsetLeft={-10}\n                    offsetTop={-27}\n                    onClick={handleTogglePopup}\n                >\n                    <MarkerIcon imgPath=\"images/map_pin_icon.png\" />\n                </Marker>\n                {isShowPopup && width > 767 ? (\n                    !isLoadingWeather ? (\n                        currentWeather ? (\n                            <Popup\n                                latitude={currentCoordinates.latitude}\n                                longitude={currentCoordinates.longitude}\n                                closeButton={false}\n                                anchor=\"top\"\n                            >\n                                <WeatherPopup data={currentWeather} />\n                            </Popup>\n                        ) : (\n                            <Popup\n                                latitude={currentCoordinates.latitude}\n                                longitude={currentCoordinates.longitude}\n                                closeButton={false}\n                                anchor=\"top\"\n                            >\n                                <div className=\"noInfo\">No information</div>\n                            </Popup>\n                        )\n                    ) : (\n                        <Popup\n                            latitude={currentCoordinates.latitude}\n                            longitude={currentCoordinates.longitude}\n                            closeButton={false}\n                            anchor=\"top\"\n                        >\n                            <WeatherLoading>\n                                <RingLoader size={30} color=\"#000\" />\n                            </WeatherLoading>\n                        </Popup>\n                    )\n                ) : (\n                    <></>\n                )}\n            </ReactMapGL>\n            {width <= 767 && (\n                <WeatherPopupMobile\n                    data={currentWeather}\n                    isShowPopup={isShowPopup}\n                    isLoading={isLoadingWeather}\n                    onClose={() => setIsShowPopUp(false)}\n                />\n            )}\n        </Container>\n    );\n};\n\nconst Container = styled.div`\n    height: 100vh;\n\n    .searchBox {\n        position: fixed;\n        z-index: 1;\n        top: 10px;\n        right: 10px;\n\n        .loading {\n            position: absolute;\n            top: 2px;\n            right: calc(100% + 25px);\n            /* transform: translateY(-50%); */\n        }\n    }\n\n    .toggleDarkMode {\n        position: fixed;\n        top: 10px;\n        left: 10px;\n        z-index: 1;\n        width: 30px;\n        height: 30px;\n\n        svg {\n            width: 100%;\n            height: 100%;\n        }\n    }\n`;\n\nconst SearchResult = styled.div`\n    position: absolute;\n    top: 100%;\n    left: 0;\n    background-color: #fff;\n    width: 100%;\n    border: 1px solid #6b6969;\n    box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.5);\n\n    .listLocations {\n        max-height: 200px;\n        overflow-y: scroll;\n        /* width */\n        ::-webkit-scrollbar {\n            width: 2px;\n        }\n\n        /* Track */\n        ::-webkit-scrollbar-track {\n            background: #f1f1f1;\n        }\n\n        /* Handle */\n        ::-webkit-scrollbar-thumb {\n            background: #888;\n        }\n\n        /* Handle on hover */\n        ::-webkit-scrollbar-thumb:hover {\n            background: #555;\n        }\n\n        .resultItem {\n            padding: 5px 10px;\n            cursor: pointer;\n\n            &:hover {\n                background-color: #ccc;\n            }\n        }\n    }\n\n    .noItem {\n        padding: 5px 10px;\n    }\n`;\n\nconst WeatherLoading = styled.div`\n    padding: 30px;\n\n    > span {\n        display: inline-block;\n        position: relative;\n        left: -5px;\n    }\n`;\n\nexport default App;\n","import { useCallback, useEffect } from \"react\";\r\n\r\nexport const useDebounce = (callback: any, delay: number, deps: Array<any>) => {\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const _callback = useCallback(callback, deps);\r\n\r\n    useEffect(() => {\r\n        const timerId = setTimeout(() => {\r\n            _callback();\r\n        }, delay);\r\n\r\n        return () => {\r\n            clearTimeout(timerId);\r\n        };\r\n    }, [_callback, delay]);\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}